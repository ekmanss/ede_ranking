type IncreasePosition @entity {
    id: ID!
    blockNumber: BigInt!
    txhash: String!
    timestamp: BigInt!

    key: Bytes!
    account: String!
    collateralToken: String!
    indexToken: String!
    collateralDelta: BigInt!
    collateralDeltaInDecimal: BigDecimal!
    sizeDelta: BigInt!
    isLong: Boolean!
    price: BigInt!
    fee: BigInt!
    roundId: String!
}

type DecreasePosition @entity {
    id: ID!
    blockNumber: BigInt!
    txhash: String!
    timestamp: BigInt!

    key: Bytes!
    account: String!
    collateralToken: String!
    indexToken: String!
    collateralDelta: BigInt!
    sizeDelta: BigInt!
    isLong: Boolean!
    price: BigInt!
    fee: BigInt!
    latestCollateral: BigInt!
    previousCollateral: BigInt!
}

# IVault(_vault).getPosition(_account, _collateralTokens[i], _indexTokens[i], _isLong[i])
type PositionKeyAccount @entity {
    id: ID!
    account: Bytes!
    initBlockNumber: BigInt!
    collateralToken: Bytes!
    indexToken: Bytes!
    isLong: Boolean!
    collateralRemaining: BigInt!
    totalSize: BigInt!
}

type Transaction @entity {
    id: ID!
    blockNumber: Int!
    timestamp: Int!
    from: String!
    to: String
}

type Account @entity {
    id: ID!
    address: String!
    duration: String!
    durationId: String!
    durationAccumulatedMarginTradingVolume: String!
    durationAccumulatedMarginTradingPnl: String!
    durationAccumulatedMarginTradingRealisedPnl: String!

}

type DurationTotalVolume @entity {
    id: ID!
    duration: String!
    durationId: String!
    totalVolume: String!
}