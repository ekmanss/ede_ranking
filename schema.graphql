type Trade @entity {
    id: ID!
    account: String!
    blockNumber: BigInt!
    txhash: String!
    timestamp: BigInt!
    action: String!

    # CreateIncreasePosition
    indexToken: String
    isLong: Boolean
    sizeDelta: BigInt
    acceptablePrice: BigInt
    key: String
    size: BigInt
    collateral: BigInt
    reserveAmount: BigInt
    realisedPnl: BigInt
    markPrice: BigInt

    collateralDelta: BigInt # CreateDecreasePosition DecreaseOrder
    # order
    type: String
    createdAtBlock: BigInt
    updatedAt: BigInt
    orderIndex: BigInt
    triggerPrice: BigInt
    triggerAboveThreshold: Boolean
    executionFee: BigInt
    collateralToken: String
    purchaseToken: String
    purchaseTokenAmount: BigInt

    # swap
    tokenIn: String
    tokenOut: String
    amountIn: BigInt
    amountOut: BigInt

    # TODO
    # path
    # key
    # type
}

type Liquidation @entity {
    id: ID!
    account: String!
    blockNumber: BigInt!
    txhash: String!
    timestamp: BigInt!

    collateralToken: String!
    indexToken: String!
    isLong: Boolean!
    size: BigInt!
    collateral: BigInt!
    reserveAmount: BigInt!
    realisedPnl: BigInt!
    markPrice: BigInt!
}

type ClosedPosition @entity {
    id: ID!
    blockNumber: BigInt!
    txhash: String!
    timestamp: BigInt!

    account: String
    key: Bytes!
    size: BigInt!
    collateral: BigInt!
    averagePrice: BigInt!
    entryFundingRate: BigInt!
    reserveAmount: BigInt!
    realisedPnl: BigInt!
}

type UpdatePosition @entity {
    id: ID!
    blockNumber: BigInt!
    txhash: String!
    timestamp: BigInt!

    key: Bytes!
    account: String!
    size: BigInt!
    collateral: BigInt!
    averagePrice: BigInt!
    entryFundingRate: BigInt!
    reserveAmount: BigInt!
    realisedPnl: BigInt!
    markPrice: BigInt!
    total: BigInt!
}

type IncreasePosition @entity {
    id: ID!
    blockNumber: BigInt!
    txhash: String!
    timestamp: BigInt!

    key: Bytes!
    account: String!
    collateralToken: String!
    indexToken: String!
    collateralDelta: BigInt!
    collateralDeltaInDecimal: BigDecimal!
    sizeDelta: BigInt!
    isLong: Boolean!
    price: BigInt!
    fee: BigInt!
    roundId: String!
}

type DecreasePosition @entity {
    id: ID!
    blockNumber: BigInt!
    txhash: String!
    timestamp: BigInt!

    key: Bytes!
    account: String!
    collateralToken: String!
    indexToken: String!
    collateralDelta: BigInt!
    sizeDelta: BigInt!
    isLong: Boolean!
    price: BigInt!
    fee: BigInt!
    latestCollateral: BigInt!
    previousCollateral: BigInt!
}

type LatestCollateral @entity {
    id: ID!
    amount: BigInt!
}

type ExecutedDecreasePosition @entity {
    id: ID!
    blockNumber: BigInt!
    txhash: String!
    timestamp: BigInt!
    account: String!
    # path: Bytes!
    indexToken: String!
    collateralDelta: BigInt!
    sizeDelta: BigInt!
    isLong: Boolean!
    receiver: String!
    acceptablePrice: BigInt!
    minOut: BigInt!
    executionFee: BigInt!
    blockGap: BigInt!
    timeGap: BigInt!
}

type Position @entity {
    id: ID!
    account: Bytes!
    collateralToken: Bytes!
    indexToken: Bytes!
    isLong: Boolean!
    size: BigInt! # contract return
    collateral: BigInt!
    averagePrice: BigInt!
    entryFundingRate: BigInt!
    reserveAmount: BigInt!
    realisedPnl: BigInt!
    hasRealisedProfit: Boolean!
    lastIncreasedTime: BigInt!
}

type Summary @entity {
    id: ID! # roundId
    totalTraders: Int
    totalVolumes: BigInt!
    latestUpdateAt: BigInt!
}

type ClosedPositionPnl @entity {
    id: ID!
    amount: BigInt!
}

type IndependentUser @entity {
    id: ID! # roundId + "-" + account.toHexString()
    startTime: BigInt!
}

type LeaderBoardAccount @entity {
    id: ID! # roundId + "-" + account.toHexString();
    roundId: String
    address: String!
    pnl: BigInt # totally withdraw
    pnlPercent: BigInt
}

# IVault(_vault).getPosition(_account, _collateralTokens[i], _indexTokens[i], _isLong[i])
type PositionKeyAccount @entity {
    id: ID!
    account: Bytes!
    initBlockNumber: BigInt!
    collateralToken: Bytes!
    indexToken: Bytes!
    isLong: Boolean!
    collateralRemaining: BigInt!
    totalSize: BigInt!
}

type Pnl @entity {
    id: ID!
    blockNumber: BigInt!
    key: Bytes!
    hasProfit: Boolean!
    delta: BigInt!
    size: BigInt!
    collateral: BigInt!
    usdOut: BigInt!
    usdOutAfterFee: BigInt!
    account: String!
    realisedPnl: BigInt!
    total: BigInt
}

# all users
type User @entity {
    id: ID! # account
    startTime: BigInt!
}

type ActivePosition @entity {
    id: ID! # key
    account: String!
    size: BigDecimal!
    collateral: BigDecimal!
    averagePrice: BigDecimal!
    entryFundingRate: BigDecimal!
    reserveAmount: BigDecimal!
    realisedPnl: BigDecimal!
    markPrice: BigDecimal!
    liquidationPrice: BigDecimal!
    isLong: Boolean!
    status: Int!
    indexToken: String!
    collateralToken: String!
    timestamp: BigInt!
}

type ActivePositionFlag @entity {
    id: ID!
}

type LiquidatedPosition @entity {
    id: ID!
    key: String!
    account: String!
    timestamp: Int!
    indexToken: String!
    size: BigInt!
    isLong: Boolean!
    collateralToken: String!
    collateral: BigDecimal!
    markPrice: BigDecimal!
    averagePrice: BigDecimal!
    loss: BigDecimal!
    type: LiquidationType!
    borrowFee: BigDecimal!
}

type Transaction @entity {
    id: ID!
    blockNumber: Int!
    timestamp: Int!
    from: String!
    to: String
}

type Account @entity {
    id: ID!
    address: String!
    duration: String!
    durationId: String!
    durationAccumulatedMarginTradingVolume: String!
    durationAccumulatedMarginTradingPnl: String!
    durationAccumulatedMarginTradingRealisedPnl: String!

}

type DurationTotalVolume @entity {
    id: ID!
    duration: String!
    durationId: String!
    totalVolume: String!
}

enum LiquidationType {
    full
    partial
}
